---
title: "Czy profil użytkownika wpływa na aktywność w aplikacji?"
author: "Aleksandra Zachajska, Konstanty Andrzejczak"
format: pdf
execute: 
  echo: false #niewidoczność kodu w całym pliku
---

```{r}
#| include: false # wylaczenie wynikow 
# Załadowanie bibliotek
library(ggplot2)
library(dplyr)
library(readr)
library(tidyverse)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)

#Przypisanie danych
duolingo_data <- read_csv("duolingo_dataset.csv")
```


## Wprowadzenie

Rozwój technologii mobilnych i powszechna dostępność urządzeń elektronicznych znacząco wpłynęły na sposób, w jaki ludzie zdobywają wiedzę i rozwijają swoje umiejętności. Aplikacje mobilne, takie jak Duolingo, stanowią doskonały przykład tej rewolucji edukacyjnej, umożliwiając użytkownikom naukę języków obcych w sposób elastyczny, dostosowany do ich indywidualnych potrzeb i harmonogramu. Od momentu wprowadzenia na rynek w 2011 roku, Duolingo zdobyło ogromną popularność na całym świecie, przyciągając miliony użytkowników, którzy regularnie korzystają z aplikacji, aby doskonalić swoje umiejętności językowe.

Za sukcesem aplikacji stoi nie tylko jej innowacyjna metoda nauki, oparta na gamifikacji, ale także zdolność do dostosowania się do różnorodnych potrzeb użytkowników. Aplikacja stała się szczególnie popularna w Stanach Zjednoczonych, Europie i Azji, a jej użytkownicy reprezentują szeroką gamę krajów, kultur oraz poziomów zaawansowania. Zjawisko to skłania do refleksji nad tym, w jaki sposób profil użytkownika – obejmujący takie czynniki jak wiek, kraj pochodzenia, płeć czy wcześniejsze doświadczenia z językiem – może wpływać na jego zaangażowanie oraz efektywność nauki. Celem niniejszej pracy jest zbadanie, w jaki sposób różne cechy użytkowników aplikacji Duolingo kształtują ich aktywność, motywację oraz postępy w nauce, a także jakie czynniki mogą decydować o sukcesie w tym procesie edukacyjnym.

### Dane

Aby przeprowadzić tę analizę, posłużymy się danymi pochodzącymi z \[...\], które zawierają szczegółowe informacje na temat użytkowników, ich aktywności w aplikacji, liczby rozpoczętych i zakończonych lekcji, a także poziomu ich zaangażowania w naukę.

Dane te zostały zebrane \[daty kiedy co i jak\].





```{r}
#| include: false # wylaczenie wynikow 
# Konwersja kolumny 'duolingo_start_date' na typ Date
duolingo_data$duolingo_start_date <- as.Date(duolingo_data$duolingo_start_date, format = "%Y-%m-%dT%H:%M:%SZ")

# Ekstrakcja roku rozpoczęcia korzystania z aplikacji
duolingo_data <- duolingo_data %>%
  mutate(start_year = format(duolingo_start_date, "%Y")) %>%
  filter(!is.na(start_year)) # Usunięcie wierszy bez dat

# Grupowanie danych według roku i liczenie liczby użytkowników
popularity_by_year <- duolingo_data %>%
  group_by(start_year) %>%
  summarise(user_count = n()) %>%
  arrange(start_year)

# Wykres przedstawiający wzrost popularności Duolingo
ggplot(popularity_by_year, aes(x = as.numeric(start_year), y = user_count)) +
  geom_line(color = "blue", size = 1) +
  geom_point(color = "red", size = 3) +
  labs(
    title = "Wzrost popularności Duolingo w czasie",
    x = "Rok rozpoczęcia korzystania z aplikacji",
    y = "Liczba nowych użytkowników"
  ) +
  theme_minimal() +
  scale_x_continuous(breaks = as.numeric(popularity_by_year$start_year))

```

```{r}
# Wczytanie potrzebnych bibliotek
library(ggplot2)
library(dplyr)
library(readr)

# Wczytanie danych z pliku CSV
duolingo_data <- read_csv("duolingo_dataset.csv")

# Konwersja kolumny 'duolingo_start_date' na typ Date
duolingo_data$duolingo_start_date <- as.Date(duolingo_data$duolingo_start_date, format = "%Y-%m-%dT%H:%M:%SZ")

# Ekstrakcja roku rozpoczęcia korzystania z aplikacji
duolingo_data <- duolingo_data %>%
  mutate(
    start_year = format(duolingo_start_date, "%Y"),
    country = country
  ) %>%
  filter(!is.na(start_year) & !is.na(country)) # Usunięcie brakujących wartości

# Grupowanie danych według roku i kraju
popularity_by_year_country <- duolingo_data %>%
  group_by(start_year, country) %>%
  summarise(user_count = n(), .groups = "drop") %>%
  arrange(start_year)

# Wykres pokazujący wzrost popularności Duolingo w różnych krajach
ggplot(popularity_by_year_country, aes(x = as.numeric(start_year), y = user_count, color = country)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  labs(
    title = "Wzrost popularności Duolingo w różnych krajach",
    x = "Rok rozpoczęcia korzystania z aplikacji",
    y = "Liczba nowych użytkowników",
    color = "Kraj"
  ) +
  theme_minimal() 
  scale_x_continuous(breaks = as.numeric(unique(popularity_by_year_country$start_year)))
```

```         
```

```{r}
# Wczytanie potrzebnych bibliotek
library(ggplot2)
library(dplyr)
library(readr)

# Wczytanie danych z pliku CSV
duolingo_data <- read_csv("duolingo_dataset.csv")

# Analiza platform używanych przez użytkowników
platform_usage <- duolingo_data %>%
  group_by(duolingo_platform) %>%
  summarise(user_count = n(), .groups = "drop")

# Wykres pokazujący platformy użytkowników
ggplot(platform_usage, aes(x = reorder(duolingo_platform, -user_count), y = user_count, fill = duolingo_platform)) +
  geom_bar(stat = "identity") +
  labs(
    title = "Liczba użytkowników korzystających z różnych platform",
    x = "Platforma",
    y = "Liczba użytkowników"
  ) +
  theme_minimal() +
  theme(legend.position = "none") +
  coord_flip()

```

## Kto sięga po aplikację?
```{r}
# Zakładamy, że dane zostały wcześniej załadowane jako "duolingo_data"
# Plik CSV został wczytany, np.: duolingo_data <- read.csv("duolingo_dataset.csv")

# Wyodrębnienie unikalnych krajów
unikalne_kraje <- duolingo_data %>%
  select(country) %>%
  distinct()

# Słownik do mapowania kodów krajów na pełne nazwy (ISO3 -> pełne nazwy)
slownik <- c(
  "JP" = "Japan", "RU" = "Russian Federation", "CO" = "Colombia", 
  "TW" = "Taiwan", "GB" = "United Kingdom", "BR" = "Brazil", 
  "MX" = "Mexico", "DE" = "Germany", "FR" = "France", 
  "US" = "United States", "PL" = "Poland"
)

# Użycie słownika do zamiany kodów na pełne nazwy
unikalne_kraje$country_full <- slownik[unikalne_kraje$country]

# Agregacja danych dla liczby użytkowników według krajów
dane_kraje <- duolingo_data %>%
  group_by(country) %>%
  summarise(users = n()) %>% # Liczba użytkowników w każdym kraju
  mutate(country_full = slownik[country]) # Dodanie pełnych nazw krajów

world <- ne_countries(scale = "small", returnclass = "sf")

# Połączenie danych użytkowników z danymi o krajach
map_data <- world %>%
  left_join(dane_kraje, by = c("name" = "country_full")) # Dopasowanie po pełnych nazwach krajów

# Tworzenie wykresu mapy
library(ggplot2)

ggplot(data = map_data) +
  geom_sf(fill = "white", color = "gray90", size = 0.2) + # Tło mapy i cienkie granice
  geom_sf(aes(fill = users), color = "black", size = 0.3) + # Krajowe granice i kolory
  scale_fill_gradient(
    name = "Liczba użytkowników", # Nazwa legendy
    low = "pink", high = "red", na.value = "gray80", # Gradient od różowego do czerwonego
    guide = guide_colorbar(barwidth = 15, barheight = 0.5) # Węższa i dłuższa legenda
  ) +
  theme_minimal() + # Minimalistyczny styl
  theme(
    legend.position = "bottom", # Umieszczenie legendy poniżej mapy
    legend.title = element_text(size = 10), # Mniejsza czcionka tytułu legendy
    legend.text = element_text(size = 8), # Mniejsza czcionka w legendzie
    plot.title = element_text(size = 14, face = "bold"), # Tytuł mapy
    plot.subtitle = element_text(size = 10) # Podtytuł mapy
  ) +
  labs(
    title = "Rozkład użytkowników Duolingo według krajów",
    subtitle = "Kolor przedstawia liczbę użytkowników w danym kraju",
    caption = "Źródło: Dane Duolingo"
  )

```

```{r}
unikalne_kraje <- duolingo_data %>% 
  select(country) %>% 
  distinct()

# Zmiana nazw krajów na pełne nazwy przy użyciu słownika
slownik <- c("JP" = "Japan", "RU" = "Russian Federation", "CO" =  "Colombia", "TW" = "Taiwan", "GB" = "United Kingdom", "BR" = "Brazil", "MX" = "Mexico", "DE" = "Germany", "FR" = "France", "US" = "United States")

# Użycie slownika do zamiany kodów na pełne nazwy
kraje <- unikalne_kraje$country
kraje_z_nazwami <- slownik[kraje]

# Utworzenie ramki danych z pełnymi nazwami krajów
unikalne_kraje$country <- kraje_z_nazwami
print(unikalne_kraje)

```
```{r}

dane <- data.frame(
  country = c("US", "FR", "DE", "PL", "GB"),
  users = c(500, 300, 200, 150, 250) # liczba użytkowników w poszczególnych krajach
)

# Słownik do mapowania kodów krajów na pełne nazwy (ISO3 wymagane przez rnaturalearth)
slownik <- c("US" = "United States", "FR" = "France", "DE" = "Germany", 
             "PL" = "Poland", "GB" = "United Kingdom")
dane$country_full <- slownik[dane$country]

# Wczytanie danych geograficznych o granicach państw
world <- ne_countries(scale = "medium", returnclass = "sf")

# Połączenie danych użytkowników z danymi o krajach
map_data <- world %>%
  left_join(dane, by = c("name" = "country_full")) # Dopasowanie po nazwach krajów

# Tworzenie wykresu mapy
ggplot(data = map_data) +
  geom_sf(fill = "white", color = "gray95", size = 0) + # Tło mapy i cienkie granice
  geom_sf(aes(fill = users), color = "gray50", size = 0.2) + # Krajowe granice i kolory
  scale_fill_gradient(
    name = "Liczba użytkowników", # Nazwa legendy
    low = "pink", high = "red", na.value = "gray95", # Gradient od różowego do czerwonego
    guide = guide_colorbar(barwidth = 10, barheight = 0.5) # Węższa i dłuższa legenda
  ) +
  theme_minimal() + # Minimalistyczny styl
  theme(
    legend.position = "bottom", # Umieszczenie legendy poniżej mapy
    legend.title = element_text(size = 10), # Mniejsza czcionka tytułu legendy
    legend.text = element_text(size = 8), # Mniejsza czcionka w legendzie
    plot.title = element_text(size = 14, face = "bold"), # Tytuł mapy
    plot.subtitle = element_text(size = 10) # Podtytuł mapy
  ) +
  labs(
    title = "Rozkład użytkowników Duolingo według krajów",
    subtitle = "Kolor przedstawia liczbę użytkowników w danym kraju",
    caption = "Źródło: Dane Duolingo"
  )

```

```{r}
# Czyszczenie danych - usunięcie "no response" i zastąpienie ich NA
duolingo_data_clean <- duolingo_data %>%
  mutate(
    age = ifelse(age == "no response", NA, age),
    employment_status = ifelse(employment_status == "no response", NA, employment_status),
    gender = ifelse(gender == "no response", NA, gender)
  ) %>%
  filter(!is.na(age) & !is.na(employment_status) & !is.na(gender) & !is.na(country))

# Analiza: liczba osób w różnych wymiarach zatrudnienia w każdym kraju
employment_by_country <- duolingo_data_clean %>%
  group_by(country, employment_status) %>%
  summarise(count = n(), .groups = "drop")

# Analiza: liczba osób w różnych grupach wiekowych w każdym kraju
age_by_country <- duolingo_data_clean %>%
  group_by(country, age) %>%
  summarise(count = n(), .groups = "drop")

# Analiza: liczba osób według płci w każdym kraju
gender_by_country <- duolingo_data_clean %>%
  group_by(country, gender) %>%
  summarise(count = n(), .groups = "drop")

# Wykres 1: Zatrudnienie w każdym kraju
employment_plot <- ggplot(employment_by_country, aes(x = country, y = count, fill = employment_status)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Liczba osób według statusu zatrudnienia w różnych krajach",
    x = "Kraj",
    y = "Liczba osób",
    fill = "Status zatrudnienia"
  ) +
  theme_minimal() +
  coord_flip()

# Wykres 2: Grupy wiekowe w każdym kraju
age_plot <- ggplot(age_by_country, aes(x = country, y = count, fill = age)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Liczba osób w różnych grupach wiekowych w różnych krajach",
    x = "Kraj",
    y = "Liczba osób",
    fill = "Grupa wiekowa"
  ) +
  theme_minimal() +
  coord_flip()

# Wykres 3: Płeć w każdym kraju
gender_plot <- ggplot(gender_by_country, aes(x = country, y = count, fill = gender)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Liczba osób według płci w różnych krajach",
    x = "Kraj",
    y = "Liczba osób",
    fill = "Płeć"
  ) +
  theme_minimal() +
  coord_flip()

# Wyświetlenie wykresów
print(age_plot)
print(gender_plot)

```

```{r}
# Czyszczenie danych - usunięcie "No Response" i zastąpienie ich NA
duolingo_data_clean <- duolingo_data %>%
  mutate(
    age = ifelse(age == "No Response", NA, age),
    employment_status = ifelse(employment_status == "No Response", NA, employment_status),
    gender = ifelse(gender == "No Response", NA, gender)
  ) %>%
  filter(!is.na(age) & !is.na(employment_status) & !is.na(gender) & !is.na(country))

# Analiza: liczba osób w różnych wymiarach zatrudnienia w każdym kraju
employment_by_country <- duolingo_data_clean %>%
  filter(!is.na(employment_status)) %>%  # Usunięcie braków w zatrudnieniu
  group_by(country, employment_status) %>%
  summarise(count = n(), .groups = "drop")

# Wykres 1: Zatrudnienie w każdym kraju
employment_plot <- ggplot(employment_by_country, aes(x = country, y = count, fill = employment_status)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Liczba osób według statusu zatrudnienia w różnych krajach",
    x = "Kraj",
    y = "Liczba osób",
    fill = "Status zatrudnienia"
  ) +
  theme_minimal() +
  coord_flip()

# Wyświetlenie wykresu
print(employment_plot)

```

# Śmietnik

## Wprowadzenie

We wprowadzeniu napisać z jakich dat są zebrane dane i zaznaczyć daty widoczne w zestawieniu kiedy uczestnicy podlegający spisowi rozpoczeli korzystanie z aplikacji odnieść się do daty wprowadzenia aplikacji na rynek i mniej więcej kiedy aplikacja stała się popularna można dołaczyć dane dotyczące dynamiki wejścia na rynki w różnych krajac w szczególnosci tych uwzględnionych w zestawieniu

```{r}
#| echo: false
2 * 2
```

## Kto sięga po aplikację (ogólna charakterysyka użytkowników)?

Analiza jakie kraje są brane pod uagę w kazdym z nich możemy zestawić ile jest osób zatrudnionych w jakim wymiarze i ilu w jakim wieku jakiej płci (ogólnie info)

\## Profil użytkownika

Analiza profilu użytkowników dokładna pod katem używania apliakcji tu zestawić: -\> zaangażowanie -\> motywację -\> czy miał już stycznosc z językiem -\> poziom deklarowany vs wyznaczony w aplikacji

\## Dynamika rozwoju przy użyciu aplikacji -\> Zestawienie liczby rozpoczętych lekcji w zestawieniu z zakończonymi -\>liczba dni na pltformie vs liczba aktywnych dni -\> najdłuższa seria
